#!/usr/bin/env bash
# This script sets up a local AWS environment for running
# integration tests. It assumes Docker to be installed
# and the Docker daemon to be running.
# Usage: ./environment [up|down]

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

function docker_compose() {
  docker-compose \
    --file "$SCRIPT_DIR/docker-compose.yml" \
    "$@"
}

function aws_local() {
  # AWS CLI requires credentials to be set.
  export AWS_ACCESS_KEY_ID="test"
  export AWS_SECRET_ACCESS_KEY="test"

  aws --endpoint-url="http://localhost:4566" --region "eu-west-1" "$@"
}

function environment_up() {
  aws_local dynamodb create-table --table-name "scraper_key_value_store" \
    --attribute-definitions AttributeName=website,AttributeType=S \
    --key-schema AttributeName=website,KeyType=HASH \
    --provisioned-throughput ReadCapacityUnits=25,WriteCapacityUnits=25
}

function retry() {
  local count=1
  local retries=10

  while [ $count -lt $retries ]; do
    if "$@"; then
      break
    else
      printf "Command failed. Attempt %s/%s\n" "$count" "$retries"
      ((count++))
      sleep 1
    fi
  done

  if [ "$count" -ge "$retries" ]; then
    echo "Failed retries" >&2
    exit 1
  fi
}

if [ "$#" -ne 1 ]; then
  echo "usage: $0 [up|down]" >&2
  exit 1
fi

case "$1" in
  "up")
    echo "Starting local environment..."
    docker_compose up --remove-orphans -d
    retry environment_up
  ;;
  "down")
    echo "Stopping local environment..."
    docker_compose rm -sf
  ;;
  *)
    echo "usage: $0 [up|down]" >&2
    exit 1
  ;;
esac